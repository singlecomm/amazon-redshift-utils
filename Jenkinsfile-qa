pipeline {
  agent none

  stages {

    stage('Stash'){
      agent any
      steps{
        sh'''
          git rev-parse HEAD > hash
        '''
        stash name:'qa_stash', includes: 'hash' //stores the commit head in a stash
      }
    }

    stage('Select for QA') {
      agent none
      steps {
        timeout(time:5, unit:'DAYS') {
          input id: 'deploy', message: 'Deploy to QA?'
        }
      }
    }

    stage ('Deploy to QA') {
      agent any
      steps {
        unstash 'qa_stash' //unstashes the qa_stash
        sh'''
          git reset --hard $(cat hash)
          export TAG="v$(npm run -s get-version)"
          bin/deploy.sh qa
        '''
      }
    }

    stage('Select for Staging') {
      agent none
      steps {
        timeout(time:5, unit:'DAYS') {
          input message: 'Stage for Production?'
        }
      }
    }

    stage('Stage') {
      agent any
      steps {
        sshagent(['SingleComm-Service-SSH-Github']) {

          unstash 'qa_stash' //unstashes the qa_stash
          sh'''
            git checkout qa
            git reset --hard $(cat hash)
            rm hash
            git checkout master
            git merge qa
            git push origin master
          '''
        }
      }
    }
  }

  post {
    failure {
      //if failure send a failure message
      slackSend channel: '#alerts-ops-deploy', message: "FAILED Amazon Redshift Utils QA deployment\n${env.JOB_NAME} #${env.BUILD_NUMBER}"
    }
    success {
      //if successful send a success message
      slackSend channel: '#alerts-ops-deploy', message: "SUCCESSFUL Amazon Redshift Utils QA deployment\n${env.JOB_NAME} #${env.BUILD_NUMBER}"
    }
  }
}